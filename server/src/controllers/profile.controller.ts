import { paginationQuery } from "./../@types/misc.types";
import { categories } from "./../utils/musicCategories";
import AutoPlaylist from "@/models/autogenerated.model";
import History from "@/models/history.model";
import Music, { MusicDocument } from "@/models/music.model";
import Playlist from "@/models/playlist.model";
import { User } from "@/models/user.model";
import { getUsersPreviousHistory } from "@/utils/helper";
import { RequestHandler } from "express";
import moment from "moment";
import mongoose, {
  isValidObjectId,
  ObjectId,
  PipelineStage,
  Types,
} from "mongoose";
import { title } from "process";

/**
 * @desc    Update Follower Status Controller
 * @route   POST /api/v1/profile/update-follower/:profileId
 * @access  Private
 *
 * Updates the follower status for a user. Adds or removes the follower based on current status.
 * Ensures the profile ID is valid and the user exists.
 */
export const updateFollower: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  let status: "added" | "removed";
  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Unauthorized Access!" });
  }
  const user = await User.findById(profileId);
  if (!user) {
    return res.status(404).json({ error: "User not found" });
  }
  const alreadyFollower = await User.findOne({
    _id: profileId,
    followers: req.user.id,
  });
  if (alreadyFollower) {
    await User.updateOne(
      {
        _id: profileId,
      },
      {
        $pull: { followers: req.user.id },
      }
    );
    status = "removed";
  } else {
    // Follow the user
    await User.updateOne(
      {
        _id: profileId,
      },
      {
        $addToSet: { followers: req.user.id },
      }
    );
    status = "added";
  }
  if (status === "added") {
    // Update the following list(add)
    await User.updateOne(
      {
        _id: req.user.id,
      },
      {
        $addToSet: { following: profileId },
      }
    );
  }
  if (status === "removed") {
    // remove from the following list(remove)
    await User.updateOne(
      {
        _id: req.user.id,
      },
      {
        $pull: { following: profileId },
      }
    );
  }
  res.json({ status });
};

/**
 * @desc    Get User Uploads Controller
 * @route   GET /api/v1/profile/uploads
 * @access  Private
 *
 * Retrieves a list of music uploads for the authenticated user.
 * Supports pagination through 'skip' and 'limit' query parameters.
 */
export const getUploads: RequestHandler = async (req, res) => {
  const { skip = "0", limit = "10" } = req.query as paginationQuery;
  const data = await Music.find({
    user: req.user.id,
  })
    .skip(parseInt(skip) * parseInt(limit))
    .limit(parseInt(limit))
    .sort("-createdAt");
  const musics = data.map((item) => {
    return {
      id: item._id,
      title: item.title,
      about: item.about,
      categories: item.categories,
      file: item.file.url,
      thumbnail: item.thumbnail?.url,
      date: item.createdAt,
      user: {
        name: req.user.name,
        id: req.user.id,
      },
    };
  });
  res.json({ musics });
};

/**
 * @desc    Get Public User Uploads Controller
 * @route   GET /api/v1/profile/uploads/:profileId
 * @access  Public
 *
 * Retrieves a list of public music uploads for a specific user.
 * Supports pagination through 'skip' and 'limit' query parameters.
 * Ensures the profile ID is valid.
 */
export const getPublicUploads: RequestHandler = async (req, res) => {
  const { skip = "0", limit = "10" } = req.query as paginationQuery;
  const { profileId } = req.params;
  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Unauthorized Access!" });
  }
  const data = await Music.find({
    user: profileId,
  })

    .skip(parseInt(skip) * parseInt(limit))
    .limit(parseInt(limit))
    .sort("-createdAt")
    .populate<MusicDocument<{ name: string; _id: ObjectId }>>("user");
  const musics = data.map((item) => {
    return {
      id: item._id,
      title: item.title,
      about: item.about,
      categories: item.categories,
      file: item.file.url,
      thumbnail: item.thumbnail?.url,
      date: item.createdAt,
      user: {
        name: item.user.name,
        id: item.user._id,
      },
    };
  });
  res.json({ musics });
};

/**
 * @desc    Get Public User Profile Controller
 * @route   GET /api/v1/profile/public/:profileId
 * @access  Public
 *
 * Retrieves the public profile of a specific user.
 * Ensures the profile ID is valid and the user exists.
 */
export const getPublicProfile: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Unauthorized Access!" });
  }
  const user = await User.findById(profileId);
  if (!user) {
    return res.status(404).json({ error: "User not found" });
  }
  res.json({
    profile: {
      id: user._id,
      name: user.name,
      followers: user.followers.length,
      avatar: user.avatar?.url,
    },
  });
};

/**
 * @desc    Get Public User Playlists Controller
 * @route   GET /api/v1/profile/playlist/:profileId
 * @access  Public
 *
 * Retrieves a list of public playlists for a specific user.
 * Supports pagination through 'skip' and 'limit' query parameters.
 * Ensures the profile ID is valid.
 */
export const getPublicPlaylists: RequestHandler = async (req, res) => {
  const { profileId } = req.params;
  const { skip = "0", limit = "10" } = req.query as paginationQuery;

  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Unauthorized Access!" });
  }
  const playlists = await Playlist.find({
    user: profileId,
    visibility: "public",
  })
    .skip(parseInt(limit) * parseInt(skip))
    .limit(parseInt(limit))
    .sort("-createdAt");

  res.json({
    playlists: playlists.map((item) => {
      return {
        id: item._id,
        title: item.title,
        itemsCount: item.items.length,
        visibility: item.visibility,
      };
    }),
  });
};

export const getRecommended: RequestHandler = async (req, res) => {
  const user = req.user;
  let matchOptions: PipelineStage.Match = {
    $match: { _id: { $exists: true } },
  };
  if (user) {
    // send by profile
    const usersPreviousHistory = await History.aggregate([
      {
        $match: {
          user: new mongoose.Types.ObjectId(user.id),
        },
      },
      {
        $unwind: "$all",
      },
      {
        $match: {
          "all.date": {
            $gte: moment().subtract(30, "days").toDate(),
          },
        },
      },
      {
        $group: {
          _id: "$all.music",
        },
      },
      {
        $lookup: {
          from: "musics",
          localField: "_id",
          foreignField: "_id",
          as: "musicData",
        },
      },
      {
        $unwind: "$musicData",
      },
      {
        $group: {
          _id: null,
          categories: { $addToSet: "$musicData.categories" },
        },
      },
      {
        $unwind: "$categories",
      },
      {
        $unwind: "$categories",
      },
      {
        $group: {
          _id: null,
          categories: { $addToSet: "$categories" },
        },
      },
    ]);

    const categories = usersPreviousHistory[0]?.categories || [];
    matchOptions = {
      $match: { categories: { $in: categories } },
    };
  }
  // Otherwise send default musics
  const musics = await Music.aggregate([
    matchOptions,
    {
      $sort: {
        "likes.count": -1,
      },
    },
    { $limit: 10 },
    {
      $lookup: {
        from: "users",
        localField: "user",
        foreignField: "_id",
        as: "user",
      },
    },
    {
      $unwind: "$user",
    },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        categories: "$categories",
        about: "$about",
        file: "$file.url",
        thumbnail: "$thumbnail.url",
        user: {
          name: "$user.name",
          id: "$user._id",
        },
      },
    },
  ]);
  res.json({ musics });
};

export const getAutoGeneratedPlaylist: RequestHandler = async (req, res) => {
  // find out 5 playlist
  // 1 mix 20

  const [result] = await History.aggregate([
    { $match: { user: req.user.id } },
    { $unwind: "$all" },
    { $group: { _id: "$all.music", items: { $addToSet: "$all.music" } } },
    { $sample: { size: 20 } },
    { $group: { _id: null, items: { $push: "$_id" } } },
  ]);

  const title = "Mix 20";

  if (result) {
    await Playlist.updateOne(
      { user: req.user.id, title },
      { $set: { title, items: result.items, visibility: "auto" } },
      { upsert: true }
    );
  }

  // 4 autoGeneratedPlaylist
  const category = await getUsersPreviousHistory(req);
  let matchOptions: PipelineStage.Match = {
    $match: { _id: { $exists: true } },
  };

  if (category.length) {
    matchOptions = { $match: { title: { $in: category } } };
  }

  const agpl = await AutoPlaylist.aggregate([
    matchOptions,
    { $sample: { size: 4 } },
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "$title",
        itemsCount: { $size: "$items" },
      },
    },
  ]);

  const playlist = await Playlist.findOne({ user: req.user.id, title });

  const finalList = agpl.concat({
    id: playlist?._id,
    title: playlist?.title,
    itemsCount: playlist?.items.length,
  });

  res.json({ playlist: finalList });
};

export const getFollowersProfile: RequestHandler = async (req, res) => {
  const { limit = "20", skip = "0" } = req.query as paginationQuery;

  const [result] = await User.aggregate([
    { $match: { _id: req.user.id } },
    {
      $project: {
        followers: {
          $slice: [
            "$followers",
            parseInt(skip) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    { $unwind: "$followers" },
    {
      $lookup: {
        from: "users",
        localField: "followers",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followers: {
          $push: {
            id: "$userInfo._id",
            name: "$userInfo.name",
            avatar: "$userInfo.avatar.url",
          },
        },
      },
    },
  ]);

  if (!result) {
    return res.json({ followers: [] });
  }

  res.json({ followers: result.followers });
};

export const getFollowersProfilePublic: RequestHandler = async (req, res) => {
  const { limit = "20", skip = "0" } = req.query as paginationQuery;
  const { profileId } = req.params;

  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Invalid profile id!" });
  }

  const [result] = await User.aggregate([
    { $match: { _id: new Types.ObjectId(profileId) } },
    {
      $project: {
        followers: {
          $slice: [
            "$followers",
            parseInt(skip) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    { $unwind: "$followers" },
    {
      $lookup: {
        from: "users",
        localField: "followers",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followers: {
          $push: {
            id: "$userInfo._id",
            name: "$userInfo.name",
            avatar: "$userInfo.avatar.url",
          },
        },
      },
    },
  ]);

  if (!result) {
    return res.json({ followers: [] });
  }

  res.json({ followers: result.followers });
};

export const getFollowingsProfile: RequestHandler = async (req, res) => {
  const { limit = "20", skip = "0" } = req.query as paginationQuery;

  const [result] = await User.aggregate([
    { $match: { _id: req.user.id } },
    {
      $project: {
        followings: {
          $slice: [
            "$followings",
            parseInt(skip) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    { $unwind: "$followings" },
    {
      $lookup: {
        from: "users",
        localField: "followings",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followings: {
          $push: {
            id: "$userInfo._id",
            name: "$userInfo.name",
            avatar: "$userInfo.avatar.url",
          },
        },
      },
    },
  ]);

  if (!result) {
    return res.json({ followings: [] });
  }

  res.json({ followings: result.followings });
};

export const getPlaylistMusics: RequestHandler = async (req, res) => {
  const { limit = "20", skip = "0" } = req.query as paginationQuery;
  const { playlistId } = req.params;
  if (!isValidObjectId(playlistId)) {
    return res.status(422).json({ error: "Invalid playlist id!" });
  }

  const result = await Playlist.aggregate([
    { $match: { _id: new Types.ObjectId(playlistId) } },
    {
      $project: {
        items: {
          $slice: ["$items", parseInt(skip), parseInt(limit)],
        },
        title: "$title",
      },
    },
    { $unwind: "$items" },
    {
      $lookup: {
        from: "musics",
        localField: "items",
        foreignField: "_id",
        as: "musics",
      },
    },
    {
      $unwind: "$musics",
    },
    {
      $lookup: {
        from: "users",
        localField: "musics.user",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    {
      $unwind: "$userInfo",
    },
    {
      $group: {
        _id: {
          id: "$_id",
          title: "$title",
        },
        musics: {
          $push: {
            id: "$musics._id",
            title: "$musics.title",
            about: "$musics.about",
            categories: "$musics.categories",
            file: "$musics.file.url",
            thumbnail: "$musics.thumbnail.url",
            user: {
              id: "$userInfo._id",
              name: "$userInfo.name",
            },
          },
        },
      },
    },
  ]);

  res.json(result);
};

export const getPrivatePlaylistMusics: RequestHandler = async (req, res) => {
  const { limit = "20", skip = "0" } = req.query as paginationQuery;
  const { playlistId } = req.params;
  if (!isValidObjectId(playlistId)) {
    return res.status(422).json({ error: "Invalid playlist id!" });
  }

  const result = await Playlist.aggregate([
    { $match: { _id: new Types.ObjectId(playlistId), user: req.user.id } },
    {
      $project: {
        items: {
          $slice: ["$items", parseInt(skip), parseInt(limit)],
        },
        title: "$title",
      },
    },
    { $unwind: "$items" },
    {
      $lookup: {
        from: "musics",
        localField: "items",
        foreignField: "_id",
        as: "musics",
      },
    },
    {
      $unwind: "$musics",
    },
    {
      $lookup: {
        from: "users",
        localField: "musics.user",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    {
      $unwind: "$userInfo",
    },
    {
      $group: {
        _id: {
          id: "$_id",
          title: "$title",
        },
        musics: {
          $push: {
            id: "$musics._id",
            title: "$musics.title",
            about: "$musics.about",
            categories: "$musics.categories",
            file: "$musics.file.url",
            thumbnail: "$musics.thumbnail.url",
            user: {
              id: "$userInfo._id",
              name: "$userInfo.name",
            },
          },
        },
      },
    },
  ]);

  res.json(result);
};

export const getIsFollowing: RequestHandler = async (req, res) => {
  try {
    const { profileId } = req.params;
    const currentUserId = req.user.id;

    if (!isValidObjectId(profileId)) {
      return res.status(422).json({ error: "Invalid profile id!" });
    }

    const currentUser = await User.findById(currentUserId);

    if (!currentUser) {
      return res.status(404).json({ error: "Current user not found" });
    }

    const isFollowing = currentUser.following.some(
      (id) => id.toString() === profileId
    );

    res.json({ status: isFollowing });
  } catch (error: unknown) {
    let errorMessage = "An unexpected error occurred";
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    res.status(500).json({ error: "Server error", details: errorMessage });
  }
};
