import {
  getAutoGeneratedPlaylist,
  getFollowersProfile,
  getFollowersProfilePublic,
  getFollowingsProfile,
  getIsFollowing,
  getPlaylistMusics,
  getPrivatePlaylistMusics,
  getPublicPlaylists,
  getPublicProfile,
  getPublicUploads,
  getRecommended,
  getUploads,
  updateFollower,
} from "@/controllers/profile.controller";
import { isAuth, mustAuth } from "@/middlewares/auth.middleware";
import { Router } from "express";

const profileRouter = Router();

/**
 * @route   POST /api/v1/profile/update-follower/:profileId
 * @desc    Update the follower count for a user's profile
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.post("/update-follower/:profileId", isAuth, updateFollower);

/**
 * @route   GET /api/v1/profile/uploads
 * @desc    Get uploads for the authenticated user
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.get("/uploads", isAuth, getUploads);

/**
 * @route   GET /api/v1/profile/uploads/:profileId
 * @desc    Get public uploads for a specific user profile
 * @access  Public
 */
profileRouter.get("/uploads/:profileId", getPublicUploads);

/**
 * @route   GET /api/v1/profile/public/:profileId
 * @desc    Get public profile information for a specific user
 * @access  Public
 */
profileRouter.get("/public/:profileId", getPublicProfile);

/**
 * @route   GET /api/v1/profile/playlist/:profileId
 * @desc    Get public playlists for a specific user profile
 * @access  Public
 */
profileRouter.get("/playlist/:profileId", getPublicPlaylists);

/**
 * @route   GET /api/v1/profile/recommended
 * @desc    Get recommended profiles for the authenticated user
 * @access  Private
 * @requires mustAuth - User must be authenticated and verified
 */
profileRouter.get("/recommended", mustAuth, getRecommended);

/**
 * @route   GET /api/v1/profile/auto-generated-playlist
 * @desc    Get auto-generated playlist for the authenticated user
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.get("/auto-generated-playlist", isAuth, getAutoGeneratedPlaylist);

/**
 * @route   GET /api/v1/profile/followers
 * @desc    Get follower profiles for the authenticated user
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.get("/followers", isAuth, getFollowersProfile);

/**
 * @route   GET /api/v1/profile/followers/:profileId
 * @desc    Get public follower profiles for a specific user profile
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.get("/followers/:profileId", isAuth, getFollowersProfilePublic);

/**
 * @route   GET /api/v1/profile/followings
 * @desc    Get following profiles for the authenticated user
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.get("/followings", isAuth, getFollowingsProfile);

/**
 * @route   GET /api/v1/profile/priavte-playlist-musics/:playlistId
 * @desc    Get private playlist musics for the authenticated user
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.get(
  "/priavte-playlist-musics/:playlistId",
  isAuth,
  getPrivatePlaylistMusics
);

/**
 * @route   GET /api/v1/profile/is-following/:profileId
 * @desc    Check if the authenticated user is following a specific user
 * @access  Private
 * @requires isAuth - User must be authenticated
 */
profileRouter.get("/is-following/:profileId", isAuth, getIsFollowing);

export default profileRouter;
